%%% Sample code to compute GWtau distance matrix 
%%% This code uses (as an example) data from Ignacio et al. 2022
%%% In general, there are two possible cases for storing thetrajectories:
%%% (1) Trajectories have the same length: store as matrix (the case here)
%%% (2) Trajectories have different lengths: store as list 

%%% For Ignacio et al. 2022, all trajectroies are defined on the same time
%%% poitns, so we are at case (1)

%%% To compute the entry of GWtau matrix, 2 functions must be used:
%%% (1) vi=vec_geo_dist(Traji) computes vector of intrinsic distances along a
%%% trajectory Traji
%%% (2) wass_sorted(vi, vj) computes GWtau_ij, the GWtau distance between
%%% trajectories using their intrinsic distances

%%% 6 figures are generated by this code: 3 figures for plotting the data and 3 figures
%%% for plotting distance matrices


clear all
close all
clc

%%% load (sub)matrices for wt, gpb-1, and let-99 trajectories
load Ignacio2022.mat
X=[wt gpb1 let99]; %stores all trajectories in a matrix X

n=size(X,2); %number of trajectories in the dataset (all distance matrices will thus be n-by-n)

%%% GWtau
GW=zeros(n,n);
n_time_pts=size(X,1); %number of time points (the same for all trajectories)
time=(0:n_time_pts-1)';
for i=1:n
    for j=i+1:n %since GWtau is symmetric matrix, we only compute it's upper part
        timei=time; %define time vector (is the same for all trajectories in this case)
        timej=time;
        Traji=[timei X(:,i)]; %extract trajectory i as 2-coordinate object: [time measurements]
        Trajj=[timej X(:,j)]; %extract trajectory j as 2-coordinate object: [time measurements]
        vi=vec_geo_dist(Traji); %compute vector of intrinsic distances from the start of trajectory i
        vj=vec_geo_dist(Trajj); %compute vector of intrinsic distances from the start of trajectory j
        GW(i,j)=wass_sorted(vi,vj); %compute GWtau as wasserstein distance
    end
end
GW=GW+GW'; %

%%% Dynamic time warping (using Matlab's function 'dtw')
DTW=zeros(n,n);
for i=1:n
    for j=1:n
        DTW(i,j)=dtw(X(:,i),X(:,j));
    end
end

%%% Euclidean
E=zeros(n,n);
for i=1:n
    for j=i+1:n
        timei=(0:n_time_pts-1)';
        timej=(0:n_time_pts-1)';
        Traji=[timei X(:,i)];
        Trajj=[timej X(:,j)];
        E(i,j)=norm(Traji-Trajj);
    end
end
E=E+E';




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% plots
%%% plot the trajectories
figure(1)
plot(wt,'g')
ylim([-80 80])
xlabel('time')
ylabel('measurement')
title('wt trajectories')
figure(2)
plot(gpb1,'m')
ylim([-80 80])
xlabel('time')
ylabel('measurement')
title('gpb-1 trajectories')
figure(3)
plot(let99,'m')
ylim([-80 80])
xlabel('time')
ylabel('measurement')
title('let-99 trajectories')

%%%%%%%%%%% heatmap GW
figure(4)
heatmap(GW,'Colormap',cool)
title('GWtau')

%%%%%%%%%%% heatmap DTW
figure(5)
heatmap(DTW,'Colormap',cool)
title('Dynamic Time Warping (DTW)')

%%%%%%%%%%% heatmap Euclidean
figure(6)
heatmap(E,'Colormap',cool)
title('Euclidean')

